; vi: ft=asm

; based on: https://github.com/riscv-software-src/opensbi
; license: https://github.com/riscv-software-src/opensbi/blob/master/COPYING.BSD

; files:
; fw_payload.dep
; firmware/fw_base.S
; firmware/fw_payload.S
; riscv_asm.h


; include/sbi/sbi_scratch.h
#define SBI_SCRATCH_SIZE                     (0x1000)

; include/sbi/riscv_encoding.h
#if __riscv_xlen == 64
#define LOG_REGBYTES			3
#else
#define LOG_REGBYTES			2
#endif
#define REGBYTES			(1 << LOG_REGBYTES)

; include/sbi/riscv_elf.h
; #define R_RISCV_RELATIVE      3

; firmware/fw_base.S
.macro	MOV_3R __d0, __s0, __d1, __s1, __d2, __s2
	add	\__d0, \__s0, zero
	add	\__d1, \__s1, zero
	add	\__d2, \__s2, zero
.endm

; firmware/fw_base.S
.macro	MOV_5R __d0, __s0, __d1, __s1, __d2, __s2, __d3, __s3, __d4, __s4
	add	\__d0, \__s0, zero
	add	\__d1, \__s1, zero
	add	\__d2, \__s2, zero
	add	\__d3, \__s3, zero
	add	\__d4, \__s4, zero
.endm

;	REG_S	t1, 0(t0) === sd t1, 0(t0)
_start:
	/* Find preferred boot HART id */
	MOV_3R	s0, a0, s1, a1, s2, a2
	call	fw_boot_hart
	add	a6, a0, zero
	MOV_3R	a0, s0, a1, s1, a2, s2
	li	a7, -1
	beq	a6, a7, _try_lottery # 22:
	/* Jump to relocation wait loop if we are not boot hart */
	bne	a0, a6, _wait_relocate_copy_done
_try_lottery:
	/* Jump to relocation wait loop if we don't get relocation lottery */
	lla	a6, _relocate_lottery # 2a: a6 = 8004_0000
	li	a7, 1 # 32: 
	amoadd.w a6, a7, (a6) # a6 = 0000_0000 ?
	bnez	a6, _wait_relocate_copy_done # a6 != 0 then jump 800000096 (doesn't jump)

	/* Save load address */
	lla	t0, _load_start # t0 = 8004_0010
	lla	t1, _fw_start   # t1 = 8000_0000 ?
	REG_S	t1, 0(t0)     # 4c: sd t1, 0(t0)

#ifdef FW_PIC ; this is by default
	/* relocate the global table content */
	lla	t0, _link_start ; 50: t0 = 8004_0018
	REG_L	t0, 0(t0)     ; 58: ld x5, 0x0(x5)
	/* t1 shall has the address of _fw_start */
	sub	t2, t1, t0          ; 5c: t2 = 0000_0000
	lla	t0, __rel_dyn_start ; 64: t0 = 8003_4000
	lla	t1, __rel_dyn_end   ; 6c: t1 = 8003_6868
	beq	t0, t1, _relocate_done ; 70: beq x5, x6, 0x8000_0098
2:
	REG_L	t5, REGBYTES(t0)	/* t5 <-- relocation info:type */
	                        ; 74: ld x30, 0x8(x5)
	                        ; t5/x30 = 3
	li	t3, R_RISCV_RELATIVE	/* reloc type R_RISCV_RELATIVE */
	                        ; c.li x28, 3
	bne	t5, t3, 3f          ; t5 == 3, t3 == 3
	REG_L	t3, 0(t0)         ; 7e: ld x28, 0x0(x5)
													;     x28/t3 = 8004_0010
	REG_L	t5, (REGBYTES * 2)(t0)	/* t5 <-- addend */
													; 82: ld x30, 0x16(x5)
													;     x30/t5 = 8000_0000
	add	t5, t5, t2          ; 86: c.add x30, x7
													;     x30/t5 = 8000_0000
	add	t3, t3, t2          ; 88: c.add x28, x7
	                        ;     x28/t3 = 8004_0010
	REG_S	t5, 0(t3)		/* store runtime address to the GOT entry */
													; sd x30, 0x0(x28)

3:
	addi	t0, t0, (REGBYTES * 3); 8e: s.addi x5, 24
															;     x5/t0 = 8003_4018
	blt	t0, t1, 2b              ; 90: if t0 < t1
															;     if 8003_4018 < 8003_6868
															;        8003_4030
															;        8003_4048
	j	_relocate_done            ; 94: 
_wait_relocate_copy_done:
	j	_wait_for_boot_hart       ; 96

_relocate_done:               ; 98

	/*
	 * Mark relocate copy done
	 * Use _boot_status copy relative to the load address
	 */
	lla	t0, _boot_status        ; 9c: t0/x5 = 8004_0008
#ifndef FW_PIC ; disabled code until endif
	lla	t1, _link_start
	REG_L	t1, 0(t1)
	lla	t2, _load_start
	REG_L	t2, 0(t2)
	sub	t0, t0, t1
	add	t0, t0, t2
#endif
	li	t1, BOOT_STATUS_RELOCATE_DONE ; a0: c.li x6, 1
	REG_S	t1, 0(t0)                   ; a2: sd x6, 0x0(x5)
	fence	rw, rw

	/* At this point we are running from link address */

	/* Reset all registers except ra, a0, a1 and a2 for boot HART */
	li	ra, 0                 ; aa: c.li x1, 0
	call	_reset_regs         ; ac: jal 0x8000_04f8

	/* Zero-out BSS */
	lla	s4, _bss_start        ; b4: x20/a4 = 8004_3000
	lla	s5, _bss_end          ; bc: x21/s5 = 8004_5ff8
_bss_zero:
	REG_S	zero, (s4)               ; c0: sd x0, 0x0(x20)
	add	s4, s4, __SIZEOF_POINTER__
	blt	s4, s5, _bss_zero          ; c6: 

	/* Setup temporary trap handler */
	lla	s4, _start_hang            ; ca: x20/s4 = 8000_03d8
	csrw	CSR_MTVEC, s4            ; d2: 

	/* Setup temporary stack */
	lla	s4, _fw_end                ; da: x20/s4 = 8004_6000
	li	s5, (SBI_SCRATCH_SIZE * 2) ; de: x21/s5 = x2000 (8KB)
	add	sp, s4, s5                 ; e0: sp = 8004_8000

	/* Allow main firmware to save info */
	MOV_5R	s0, a0, s1, a1, s2, a2, s3, a3, s4, a4
	call	fw_save_info             ; f8: jal x1, 8000_0540
	MOV_5R	a0, s0, a1, s1, a2, s2, a3, s3, a4, s4; fc: - 

  // load address of embedded DTB binary (FDT)
#ifdef FW_FDT_PATH
	/* Override previous arg1 */
	lla	a1, fw_fdt_bin            ; x11/a1 = 8003_0000
#endif

	/*
	 * Initialize platform
	 * Note: The a0 to a4 registers passed to the
	 * firmware are parameters to this function.
	 */
	MOV_5R	s0, a0, s1, a1, s2, a2, s3, a3, s4, a4
	call	fw_platform_init     ; 124: jal x1, 8000_91fe
	add	t0, a0, zero
	MOV_5R	a0, s0, a1, s1, a2, s2, a3, s3, a4, s4
	add	a1, t0, zero

	/* Preload HART details
	 * s7 -> HART Count
	 * s8 -> HART Stack Size
	 * s9 -> Heap Size
	 * s10 -> Heap Offset
	 */
	lla	a4, platform
#if __riscv_xlen > 32
	lwu	s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)
	lwu	s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)
	lwu	s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4)
#else
	lw	s7, SBI_PLATFORM_HART_COUNT_OFFSET(a4)
	lw	s8, SBI_PLATFORM_HART_STACK_SIZE_OFFSET(a4)
	lw	s9, SBI_PLATFORM_HEAP_SIZE_OFFSET(a4)
#endif

	/* Setup scratch space for all the HARTs*/
	lla	tp, _fw_end
	mul	a5, s7, s8
	add	tp, tp, a5
	/* Setup heap base address */
	lla	s10, _fw_start
	sub	s10, tp, s10
	add	tp, tp, s9
	/* Keep a copy of tp */
	add	t3, tp, zero
	/* Counter */
	li	t2, 1
	/* hartid 0 is mandated by ISA */
	li	t1, 0



	.section .entry, "ax", %progbits
	.align 3
	.globl _reset_regs
_reset_regs:            ; 8000_04f8: 

	/* flush the instruction cache */
	fence.i
	/* Reset all registers except ra, a0, a1 and a2 */
	li sp, 0
	li gp, 0
	li tp, 0
	li t0, 0
	li t1, 0
	li t2, 0
	li s0, 0
	li s1, 0
	li a3, 0
	li a4, 0
	li a5, 0
	li a6, 0
	li a7, 0
	li s2, 0
	li s3, 0
	li s4, 0
	li s5, 0
	li s6, 0
	li s7, 0
	li s8, 0
	li s9, 0
	li s10, 0
	li s11, 0
	li t3, 0
	li t4, 0
	li t5, 0
	li t6, 0
	csrw CSR_MSCRATCH, 0

	ret

	.section .entry, "ax", %progbits
	.align 3
	.globl _start_hang
_start_hang:           ; 8000_03d8
	wfi
	j	_start_hang

	.section .entry, "ax", %progbits
	.align 3
	.weak fw_platform_init ; replaced with platform.c impl
fw_platform_init:
	add	a0, a1, zero       ; replaced
	ret                    ; replaced

; firmware/fw_payload.S
	/*
	 * This function is called very early even before
	 * fw_save_info() is called.
	 * We can only use a0, a1, and a2 registers here.
	 * The boot HART id should be returned in 'a0'.
	 */
fw_boot_hart:
	li	a0, -1
	ret

	; firmware/fw_payload.S
	.section .entry, "ax", %progbits
	.align 3
	.global fw_save_info
	/*
	 * We can only use a0, a1, a2, a3, and a4 registers here.
	 * The a0, a1, and a2 registers will be same as passed by
	 * previous booting stage.
	 * Nothing to be returned here.
	 */
fw_save_info:    ; 8000_0540
	ret
